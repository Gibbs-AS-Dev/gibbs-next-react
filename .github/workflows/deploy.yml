name: Deploy Next.js to Gibbs (Zero Downtime)

on:
  push:
    branches: [main]

jobs:
  deploy:
    name: Build & Deploy Next.js (Docker)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Install sshpass for password-based SSH authentication
      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      # Deploy files to the remote server using rsync with password authentication
      - name: Deploy Next.js files to server using rsync
        run: |
          echo "🚀 Deploying files to server..."
          sshpass -p "${{ secrets.DEV_PASSWORD }}" rsync -avzh --exclude=".git" --exclude="node_modules" -e "ssh -o StrictHostKeyChecking=no" ./ ${{ secrets.DEV_USERNAME }}@${{ secrets.HOST }}:/var/www/vhosts/dev.gibbs.no/nextjs.dev.gibbs.no

      # Execute remote commands via SSH using sshpass (with password)
      - name: Restart Docker Containers for Zero Downtime
        run: |
          echo "🚀 Connecting via SSH to deploy..."
          sshpass -p "${{ secrets.DEV_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.DEV_USERNAME }}@${{ secrets.HOST }} << 'EOF'
            echo "🚀 Deploying Next.js app with Docker Compose..."
            
            cd /var/www/vhosts/dev.gibbs.no/nextjs.dev.gibbs.no
            echo "🔄 Pulling latest changes..."
            git pull origin main || echo "⚠️ Git pull failed, skipping..."

            echo "🚀 Starting new nextjs-prod container..."
            docker compose up --build -d nextjs-prod-new


            echo "🔎 Waiting for the new container to be healthy..."
            sleep 10  # Adjust if necessary

            # Wait for the new container to be fully up
            echo "⏳ Waiting for the new container to be fully up..."
            NEW_CONTAINER_NAME=$(docker ps --filter "name=nextjsdevgibbsno-nextjs-prod-new" --format "{{.Names}}")
            echo "New container: $NEW_CONTAINER_NAME"

            # Ensure the new container is running
            if [ -z "$NEW_CONTAINER_NAME" ]; then
              echo "❌ New container failed to start!"
              exit 1
            fi

            # Stop and remove the old container
            OLD_CONTAINER_NAME=$(docker ps -a --filter "name=nextjsdevgibbsno-nextjs-prod" --format "{{.Names}}")
            if [ ! -z "$OLD_CONTAINER_NAME" ]; then
              echo "🚀 Stopping and removing old container: $OLD_CONTAINER_NAME"
              docker stop $OLD_CONTAINER_NAME
              docker rm $OLD_CONTAINER_NAME
            fi

            # Rename the new container to match the old container's name
            echo "🚀 Renaming the new container to nextjsdevgibbsno-nextjs-prod"
            docker rename $NEW_CONTAINER_NAME nextjsdevgibbsno-nextjs-prod


            echo "✅ Deployment complete with zero downtime!"
          EOF
