name: Deploy Next.js to Gibbs (Zero Downtime)

on:
  push:
    branches: [main]

jobs:
  deploy:
    name: Build & Deploy Next.js (Docker)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Install sshpass for password-based SSH authentication
      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      # Deploy files to the remote server using rsync with password authentication
      - name: Deploy Next.js files to server using rsync
        run: |
          echo "🚀 Deploying files to server..."
          sshpass -p "${{ secrets.DEV_PASSWORD }}" rsync -avzh --exclude=".git" --exclude="node_modules" -e "ssh -o StrictHostKeyChecking=no" ./ ${{ secrets.DEV_USERNAME }}@${{ secrets.HOST }}:/var/www/vhosts/dev.gibbs.no/nextjs.dev.gibbs.no

      # Execute remote commands via SSH using sshpass (with password)
      - name: Restart Docker Containers for Zero Downtime
        run: |
          echo "🚀 Connecting via SSH to deploy..."
          sshpass -p "${{ secrets.DEV_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.DEV_USERNAME }}@${{ secrets.HOST }} << 'EOF'
            echo "🚀 Deploying Next.js app with Docker Compose..."
            
            cd /var/www/vhosts/dev.gibbs.no/nextjs.dev.gibbs.no
            echo "🔄 Pulling latest changes..."
            git pull origin main || echo "⚠️ Git pull failed, skipping..."

            echo "🚀 Starting new nextjs-prod container..."
            docker-compose up --build -d nextjs-prod-new


            echo "🔎 Waiting for the new container to be healthy..."
            sleep 10  # Adjust this if needed

            NEW_CONTAINER_ID=\$(docker ps -q --filter "name=nextjs-prod-new")
            if [ -n "\$NEW_CONTAINER_ID" ]; then
              echo "✅ New container is running! Swapping traffic..."

              echo "🛑 Stopping and Removing the old nextjs-prod container..."
              OLD_CONTAINER_ID=\$(docker ps -q --filter "name=nextjs-prod")
              if [ -n "\$OLD_CONTAINER_ID" ]; then
                docker stop \$OLD_CONTAINER_ID
                docker rm \$OLD_CONTAINER_ID
              else
                echo "⚠️ No old nextjs-prod container found."
              fi

              echo "🔄 Renaming new container to nextjs-prod..."
              docker rename nextjs-prod-new nextjs-prod
            else
              echo "❌ New container failed to start! Rolling back..."
              docker stop nextjs-prod-new && docker rm nextjs-prod-new
              exit 1
            fi

            echo "✅ Deployment complete with zero downtime!"
          EOF
