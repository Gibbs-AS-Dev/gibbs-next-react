name: Deploy Next.js to Gibbs (Zero Downtime)

on:
  push:
    branches: [main]

jobs:
  deploy:
    name: Build & Deploy Next.js (Docker)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Install sshpass for password-based SSH authentication
      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      # Deploy files to the remote server using rsync with password authentication
      - name: Deploy Next.js files to server using rsync
        run: |
          echo "🚀 Deploying files to server..."
          sshpass -p "${{ secrets.DEV_PASSWORD }}" rsync -avzh --exclude=".git" --exclude="node_modules" -e "ssh -o StrictHostKeyChecking=no" ./ ${{ secrets.DEV_USERNAME }}@${{ secrets.HOST }}:/var/www/vhosts/dev.gibbs.no/nextjs.dev.gibbs.no

      # Execute remote commands via SSH using sshpass (with password)
      - name: Restart Docker Containers for Zero Downtime
        run: |
          echo "🚀 Connecting via SSH to deploy..."
          sshpass -p "${{ secrets.DEV_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.DEV_USERNAME }}@${{ secrets.HOST }} << 'EOF'
            echo "🚀 Deploying Next.js app with Docker Compose..."
            
            cd /var/www/vhosts/dev.gibbs.no/nextjs.dev.gibbs.no
            echo "🔄 Pulling latest changes..."
            git pull origin main || echo "⚠️ Git pull failed, skipping..."

            npm install --omit=dev

            echo "⚙️ Building Next.js production app..."
            npm run build
            
            echo "🔄 Starting new container before stopping old one..."

            docker-compose up --build -d nextjs-prod

            echo "🧹 Cleaning up old Docker images..."
            docker image prune -f
            
            echo "🚀 Ensuring zero downtime..."
            OLD_CONTAINER=$(docker ps -q --filter "name=nextjs_app_old")
            if [ ! -z "$OLD_CONTAINER" ]; then
              echo "🧹 Stopping old container..."
              docker stop $OLD_CONTAINER
              docker rm $OLD_CONTAINER
            fi
            
            echo "✅ Deployment complete!"
            docker compose ps
          EOF
